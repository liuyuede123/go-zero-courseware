// Code generated by goctl. DO NOT EDIT!
// Source: courseware.proto

package coursewareclient

import (
	"context"

	"go-zero-courseware/courseware/rpc/courseware"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddRequest     = courseware.AddRequest
	AddResponse    = courseware.AddResponse
	DeleteRequest  = courseware.DeleteRequest
	DeleteResponse = courseware.DeleteResponse
	GetRequest     = courseware.GetRequest
	GetResponse    = courseware.GetResponse
	UpdateRequest  = courseware.UpdateRequest
	UpdateResponse = courseware.UpdateResponse

	Courseware interface {
		Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
		Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
		Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
		Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	}

	defaultCourseware struct {
		cli zrpc.Client
	}
)

func NewCourseware(cli zrpc.Client) Courseware {
	return &defaultCourseware{
		cli: cli,
	}
}

func (m *defaultCourseware) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	client := courseware.NewCoursewareClient(m.cli.Conn())
	return client.Add(ctx, in, opts...)
}

func (m *defaultCourseware) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	client := courseware.NewCoursewareClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultCourseware) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	client := courseware.NewCoursewareClient(m.cli.Conn())
	return client.Get(ctx, in, opts...)
}

func (m *defaultCourseware) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	client := courseware.NewCoursewareClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}
