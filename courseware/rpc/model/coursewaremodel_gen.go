// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	coursewareFieldNames          = builder.RawFieldNames(&Courseware{})
	coursewareRows                = strings.Join(coursewareFieldNames, ",")
	coursewareRowsExpectAutoSet   = strings.Join(stringx.Remove(coursewareFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	coursewareRowsWithPlaceHolder = strings.Join(stringx.Remove(coursewareFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheCoursewareIdPrefix   = "cache:courseware:id:"
	cacheCoursewareCodePrefix = "cache:courseware:code:"
)

type (
	coursewareModel interface {
		Insert(ctx context.Context, data *Courseware) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Courseware, error)
		FindOneByCode(ctx context.Context, code string) (*Courseware, error)
		Update(ctx context.Context, data *Courseware) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultCoursewareModel struct {
		sqlc.CachedConn
		table string
	}

	Courseware struct {
		Id         uint64    `db:"id"`
		Code       string    `db:"code"`      // 编号
		Name       string    `db:"name"`      // 用户姓名
		Type       uint64    `db:"type"`      // 课件类型 1-h5 2-scorm 3-多媒体多章节
		IsDelete   int64     `db:"is_delete"` // 是否删除 0-未删除 1-已删除
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newCoursewareModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCoursewareModel {
	return &defaultCoursewareModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`courseware`",
	}
}

func (m *defaultCoursewareModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	coursewareCodeKey := fmt.Sprintf("%s%v", cacheCoursewareCodePrefix, data.Code)
	coursewareIdKey := fmt.Sprintf("%s%v", cacheCoursewareIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, coursewareCodeKey, coursewareIdKey)
	return err
}

func (m *defaultCoursewareModel) FindOne(ctx context.Context, id uint64) (*Courseware, error) {
	coursewareIdKey := fmt.Sprintf("%s%v", cacheCoursewareIdPrefix, id)
	var resp Courseware
	err := m.QueryRowCtx(ctx, &resp, coursewareIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", coursewareRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCoursewareModel) FindOneByCode(ctx context.Context, code string) (*Courseware, error) {
	coursewareCodeKey := fmt.Sprintf("%s%v", cacheCoursewareCodePrefix, code)
	var resp Courseware
	err := m.QueryRowIndexCtx(ctx, &resp, coursewareCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `code` = ? limit 1", coursewareRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, code); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCoursewareModel) Insert(ctx context.Context, data *Courseware) (sql.Result, error) {
	coursewareCodeKey := fmt.Sprintf("%s%v", cacheCoursewareCodePrefix, data.Code)
	coursewareIdKey := fmt.Sprintf("%s%v", cacheCoursewareIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, coursewareRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Code, data.Name, data.Type, data.IsDelete)
	}, coursewareCodeKey, coursewareIdKey)
	return ret, err
}

func (m *defaultCoursewareModel) Update(ctx context.Context, newData *Courseware) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	coursewareCodeKey := fmt.Sprintf("%s%v", cacheCoursewareCodePrefix, data.Code)
	coursewareIdKey := fmt.Sprintf("%s%v", cacheCoursewareIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, coursewareRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Code, newData.Name, newData.Type, newData.IsDelete, newData.Id)
	}, coursewareCodeKey, coursewareIdKey)
	return err
}

func (m *defaultCoursewareModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCoursewareIdPrefix, primary)
}

func (m *defaultCoursewareModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", coursewareRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCoursewareModel) tableName() string {
	return m.table
}
